#include <catch2/catch_test_macros.hpp> 
#include <catch2/matchers/catch_matchers_floating_point.hpp> 
#include <libsycl.hpp>

#include <knn.hpp>
#include <votess.hpp>
#include <xyzset.hpp>

///////////////////////////////////////////////////////////////////////////////
/// Helper functions
///////////////////////////////////////////////////////////////////////////////

template <typename T1, typename T2>
static std::pair<std::vector<T1>, std::vector<T2>>
get_knn(
  std::vector<std::array<T2,3>>& inset,
  const struct votess::vtargs& args
);

template <typename T1, typename T2>
static void test_knn(
  std::vector<std::array<T2, 3>>& xyzset,
  std::vector<std::vector<std::array<T2, 3>>>& cknn,
  unsigned short int k_max,
  unsigned short int gr_max,
  double tol
);

///////////////////////////////////////////////////////////////////////////////
/// Test cases
///////////////////////////////////////////////////////////////////////////////

TEST_CASE("knn regression 1: standard", "[ignore]") {
      
  std::vector<std::array<float, 3>> xyzset = {
    {0.605223f, 0.108484f, 0.090937f}, {0.500792f, 0.499641f, 0.464576f},
    {0.437936f, 0.786332f, 0.160392f}, {0.663354f, 0.170894f, 0.810284f},
    {0.614869f, 0.096867f, 0.204147f}, {0.556911f, 0.895342f, 0.802266f},
    {0.305748f, 0.124146f, 0.516249f}, {0.406888f, 0.157835f, 0.919622f},
    {0.094412f, 0.861991f, 0.798644f}, {0.511958f, 0.560537f, 0.345479f}
  };

  std::vector<std::vector<std::array<float, 3>>> cknn = {
    {
      {0.605223f, 0.108484f, 0.090937f},
      {0.614869f, 0.096867f, 0.204147f}, {0.305748f, 0.124146f, 0.516249f}, 
      {0.511958f, 0.560537f, 0.345479f}, {0.500792f, 0.499641f, 0.464576f}, 
      {0.437936f, 0.786332f, 0.160392f}, {0.663354f, 0.170894f, 0.810284f}, 
      {0.406888f, 0.157835f, 0.919622f}, {0.556911f, 0.895342f, 0.802266f}, 
      {0.094412f, 0.861991f, 0.798644f}
    },
    {
      {0.500792f, 0.499641f, 0.464576f},
      {0.511958f, 0.560537f, 0.345479f}, {0.437936f, 0.786332f, 0.160392f}, 
      {0.305748f, 0.124146f, 0.516249f}, {0.614869f, 0.096867f, 0.204147f}, 
      {0.663354f, 0.170894f, 0.810284f}, {0.556911f, 0.895342f, 0.802266f}, 
      {0.605223f, 0.108484f, 0.090937f}, {0.406888f, 0.157835f, 0.919622f}, 
      {0.094412f, 0.861991f, 0.798644f}
    },
    {
      {0.437936f, 0.786332f, 0.160392f},
      {0.511958f, 0.560537f, 0.345479f}, {0.500792f, 0.499641f, 0.464576f}, 
      {0.556911f, 0.895342f, 0.802266f}, {0.605223f, 0.108484f, 0.090937f}, 
      {0.614869f, 0.096867f, 0.204147f}, {0.094412f, 0.861991f, 0.798644f}, 
      {0.305748f, 0.124146f, 0.516249f}, {0.663354f, 0.170894f, 0.810284f}, 
      {0.406888f, 0.157835f, 0.919622f}
    },
    {
      {0.663354f, 0.170894f, 0.810284f},
      {0.406888f, 0.157835f, 0.919622f}, {0.305748f, 0.124146f, 0.516249f}, 
      {0.500792f, 0.499641f, 0.464576f}, {0.614869f, 0.096867f, 0.204147f}, 
      {0.511958f, 0.560537f, 0.345479f}, {0.605223f, 0.108484f, 0.090937f}, 
      {0.556911f, 0.895342f, 0.802266f}, {0.094412f, 0.861991f, 0.798644f}, 
      {0.437936f, 0.786332f, 0.160392f}
    },
    {
      {0.614869f, 0.096867f, 0.204147f},
      {0.605223f, 0.108484f, 0.090937f}, {0.305748f, 0.124146f, 0.516249f}, 
      {0.500792f, 0.499641f, 0.464576f}, {0.511958f, 0.560537f, 0.345479f}, 
      {0.663354f, 0.170894f, 0.810284f}, {0.437936f, 0.786332f, 0.160392f}, 
      {0.406888f, 0.157835f, 0.919622f}, {0.556911f, 0.895342f, 0.802266f}, 
      {0.094412f, 0.861991f, 0.798644f}
    },
    {
      {0.556911f, 0.895342f, 0.802266f},
      {0.094412f, 0.861991f, 0.798644f}, {0.500792f, 0.499641f, 0.464576f}, 
      {0.511958f, 0.560537f, 0.345479f}, {0.437936f, 0.786332f, 0.160392f}, 
      {0.663354f, 0.170894f, 0.810284f}, {0.406888f, 0.157835f, 0.919622f}, 
      {0.305748f, 0.124146f, 0.516249f}, {0.614869f, 0.096867f, 0.204147f}, 
      {0.605223f, 0.108484f, 0.090937f}
    },
    {
      {0.305748f, 0.124146f, 0.516249f},
      {0.406888f, 0.157835f, 0.919622f}, {0.500792f, 0.499641f, 0.464576f}, 
      {0.614869f, 0.096867f, 0.204147f}, {0.663354f, 0.170894f, 0.810284f}, 
      {0.511958f, 0.560537f, 0.345479f}, {0.605223f, 0.108484f, 0.090937f}, 
      {0.437936f, 0.786332f, 0.160392f}, {0.094412f, 0.861991f, 0.798644f}, 
      {0.556911f, 0.895342f, 0.802266f}
    },
    {
      {0.406888f, 0.157835f, 0.919622f},
      {0.663354f, 0.170894f, 0.810284f}, {0.305748f, 0.124146f, 0.516249f}, 
      {0.500792f, 0.499641f, 0.464576f}, {0.511958f, 0.560537f, 0.345479f}, 
      {0.614869f, 0.096867f, 0.204147f}, {0.556911f, 0.895342f, 0.802266f}, 
      {0.094412f, 0.861991f, 0.798644f}, {0.605223f, 0.108484f, 0.090937f}, 
      {0.437936f, 0.786332f, 0.160392f}
    },
    {
      {0.094412f, 0.861991f, 0.798644f},
      {0.556911f, 0.895342f, 0.802266f}, {0.500792f, 0.499641f, 0.464576f}, 
      {0.511958f, 0.560537f, 0.345479f}, {0.437936f, 0.786332f, 0.160392f}, 
      {0.406888f, 0.157835f, 0.919622f}, {0.305748f, 0.124146f, 0.516249f}, 
      {0.663354f, 0.170894f, 0.810284f}, {0.614869f, 0.096867f, 0.204147f}, 
      {0.605223f, 0.108484f, 0.090937f}
    },
    {
      {0.511958f, 0.560537f, 0.345479f},
      {0.500792f, 0.499641f, 0.464576f}, {0.437936f, 0.786332f, 0.160392f}, 
      {0.614869f, 0.096867f, 0.204147f}, {0.305748f, 0.124146f, 0.516249f}, 
      {0.605223f, 0.108484f, 0.090937f}, {0.556911f, 0.895342f, 0.802266f}, 
      {0.663354f, 0.170894f, 0.810284f}, {0.094412f, 0.861991f, 0.798644f}, 
      {0.406888f, 0.157835f, 0.919622f}
    },
  };

  const unsigned short int k_max = xyzset.size() - 1;
  const unsigned short int gr_max = 16;
  const double tol= 1e-9;
  test_knn<int, float>(xyzset, cknn, k_max, gr_max, tol);
}

///////////////////////////////////////////////////////////////////////////////

TEST_CASE("knn regression 2: Clustered Distribution", "[ignore]") {
  std::vector<std::array<float, 3>> xyzset = {
    {0.1f, 0.2f, 0.3f}, {0.11f, 0.19f, 0.31f}, {0.09f, 0.21f, 0.29f},
    {0.5f, 0.5f, 0.5f}, {0.51f, 0.49f, 0.51f}, {0.49f, 0.51f, 0.49f},
    {0.8f, 0.8f, 0.8f}, {0.81f, 0.79f, 0.81f}, {0.79f, 0.81f, 0.79f} 
  };

  std::vector<std::vector<std::array<float, 3>>> cknn = {
    {
      {0.1f, 0.2f, 0.3f},
      {0.09f, 0.21f, 0.29f}, {0.11f, 0.19f, 0.31f}, 
      {0.49f, 0.51f, 0.49f}, {0.5f, 0.5f, 0.5f}, 
      {0.51f, 0.49f, 0.51f}, {0.79f, 0.81f, 0.79f}, 
      {0.8f, 0.8f, 0.8f}, {0.81f, 0.79f, 0.81f}
    },
    {
      {0.11f, 0.19f, 0.31f},
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}, 
      {0.49f, 0.51f, 0.49f}, {0.5f, 0.5f, 0.5f}, 
      {0.51f, 0.49f, 0.51f}, {0.79f, 0.81f, 0.79f}, 
      {0.8f, 0.8f, 0.8f}, {0.81f, 0.79f, 0.81f}
    },
    {
      {0.09f, 0.21f, 0.29f},
      {0.1f, 0.2f, 0.3f}, {0.11f, 0.19f, 0.31f}, 
      {0.49f, 0.51f, 0.49f}, {0.5f, 0.5f, 0.5f}, 
      {0.51f, 0.49f, 0.51f}, {0.79f, 0.81f, 0.79f}, 
      {0.8f, 0.8f, 0.8f}, {0.81f, 0.79f, 0.81f}
    },
    {
      {0.5f, 0.5f, 0.5f},
      {0.51f, 0.49f, 0.51f}, {0.49f, 0.51f, 0.49f}, 
      {0.79f, 0.81f, 0.79f}, {0.8f, 0.8f, 0.8f}, 
      {0.81f, 0.79f, 0.81f}, {0.11f, 0.19f, 0.31f}, 
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}
    },
    {
      {0.51f, 0.49f, 0.51f},
      {0.5f, 0.5f, 0.5f}, {0.49f, 0.51f, 0.49f}, 
      {0.79f, 0.81f, 0.79f}, {0.8f, 0.8f, 0.8f}, 
      {0.81f, 0.79f, 0.81f}, {0.11f, 0.19f, 0.31f}, 
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}
    },
    {
      {0.49f, 0.51f, 0.49f},
      {0.5f, 0.5f, 0.5f}, {0.51f, 0.49f, 0.51f}, 
      {0.79f, 0.81f, 0.79f}, {0.8f, 0.8f, 0.8f}, 
      {0.11f, 0.19f, 0.31f}, {0.81f, 0.79f, 0.81f}, 
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}
    },
    {
      {0.8f, 0.8f, 0.8f},
      {0.81f, 0.79f, 0.81f}, {0.79f, 0.81f, 0.79f}, 
      {0.51f, 0.49f, 0.51f}, {0.5f, 0.5f, 0.5f}, 
      {0.49f, 0.51f, 0.49f}, {0.11f, 0.19f, 0.31f}, 
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}
    },
    {
      {0.81f, 0.79f, 0.81f},
      {0.8f, 0.8f, 0.8f}, {0.79f, 0.81f, 0.79f}, 
      {0.51f, 0.49f, 0.51f}, {0.5f, 0.5f, 0.5f}, 
      {0.49f, 0.51f, 0.49f}, {0.11f, 0.19f, 0.31f}, 
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}
    },
    {
      {0.79f, 0.81f, 0.79f},
      {0.8f, 0.8f, 0.8f}, {0.81f, 0.79f, 0.81f}, 
      {0.51f, 0.49f, 0.51f}, {0.5f, 0.5f, 0.5f}, 
      {0.49f, 0.51f, 0.49f}, {0.11f, 0.19f, 0.31f}, 
      {0.1f, 0.2f, 0.3f}, {0.09f, 0.21f, 0.29f}
    },
  };

  const unsigned short int k_max = xyzset.size() - 1;
  const unsigned short int gr_max = 16;
  const double tol= 1e-9;
  test_knn<int, float>(xyzset, cknn, k_max, gr_max, tol);

}
///////////////////////////////////////////////////////////////////////////////

TEST_CASE("knn regression 3: Uniform Distribution", "[ignore]") {
  std::vector<std::array<float, 3>> xyzset = {
    {0.1f, 0.1f, 0.1f}, {0.2f, 0.2f, 0.2f}, {0.3f, 0.3f, 0.3f},
    {0.4f, 0.4f, 0.4f}, {0.5f, 0.5f, 0.5f}, {0.6f, 0.6f, 0.6f},
    {0.7f, 0.7f, 0.7f}, {0.8f, 0.8f, 0.8f}, {0.9f, 0.9f, 0.9f}
  };
  std::vector<std::vector<std::array<float, 3>>> cknn = {
    {
      {0.1f, 0.1f, 0.1f},
      {0.2f, 0.2f, 0.2f}, {0.3f, 0.3f, 0.3f}, 
      {0.4f, 0.4f, 0.4f}, {0.5f, 0.5f, 0.5f}, 
      {0.6f, 0.6f, 0.6f}, {0.7f, 0.7f, 0.7f}, 
      {0.8f, 0.8f, 0.8f}, {0.9f, 0.9f, 0.9f}
    },
    {
      {0.2f, 0.2f, 0.2f},
      {0.3f, 0.3f, 0.3f}, {0.1f, 0.1f, 0.1f}, 
      {0.4f, 0.4f, 0.4f}, {0.5f, 0.5f, 0.5f}, 
      {0.6f, 0.6f, 0.6f}, {0.7f, 0.7f, 0.7f}, 
      {0.8f, 0.8f, 0.8f}, {0.9f, 0.9f, 0.9f}
    },
    {
      {0.3f, 0.3f, 0.3f},
      {0.2f, 0.2f, 0.2f}, {0.4f, 0.4f, 0.4f}, 
      {0.1f, 0.1f, 0.1f}, {0.5f, 0.5f, 0.5f}, 
      {0.6f, 0.6f, 0.6f}, {0.7f, 0.7f, 0.7f}, 
      {0.8f, 0.8f, 0.8f}, {0.9f, 0.9f, 0.9f}
    },
    {
      {0.4f, 0.4f, 0.4f},
      {0.5f, 0.5f, 0.5f}, {0.3f, 0.3f, 0.3f}, 
      {0.6f, 0.6f, 0.6f}, {0.2f, 0.2f, 0.2f}, 
      {0.7f, 0.7f, 0.7f}, {0.1f, 0.1f, 0.1f}, 
      {0.8f, 0.8f, 0.8f}, {0.9f, 0.9f, 0.9f}
    },
    {
      {0.5f, 0.5f, 0.5f},
      {0.4f, 0.4f, 0.4f}, {0.6f, 0.6f, 0.6f}, 
      {0.7f, 0.7f, 0.7f}, {0.3f, 0.3f, 0.3f}, 
      {0.2f, 0.2f, 0.2f}, {0.8f, 0.8f, 0.8f}, 
      {0.1f, 0.1f, 0.1f}, {0.9f, 0.9f, 0.9f}
    },
    {
      {0.6f, 0.6f, 0.6f},
      {0.5f, 0.5f, 0.5f}, {0.7f, 0.7f, 0.7f}, 
      {0.4f, 0.4f, 0.4f}, {0.8f, 0.8f, 0.8f}, 
      {0.3f, 0.3f, 0.3f}, {0.9f, 0.9f, 0.9f}, 
      {0.2f, 0.2f, 0.2f}, {0.1f, 0.1f, 0.1f}
    },
    {
      {0.7f, 0.7f, 0.7f},
      {0.6f, 0.6f, 0.6f}, {0.8f, 0.8f, 0.8f}, 
      {0.5f, 0.5f, 0.5f}, {0.9f, 0.9f, 0.9f}, 
      {0.4f, 0.4f, 0.4f}, {0.3f, 0.3f, 0.3f}, 
      {0.2f, 0.2f, 0.2f}, {0.1f, 0.1f, 0.1f}
    },
    {
      {0.8f, 0.8f, 0.8f},
      {0.9f, 0.9f, 0.9f}, {0.7f, 0.7f, 0.7f}, 
      {0.6f, 0.6f, 0.6f}, {0.5f, 0.5f, 0.5f}, 
      {0.4f, 0.4f, 0.4f}, {0.3f, 0.3f, 0.3f}, 
      {0.2f, 0.2f, 0.2f}, {0.1f, 0.1f, 0.1f}
    },
    {
      {0.9f, 0.9f, 0.9f},
      {0.8f, 0.8f, 0.8f}, {0.7f, 0.7f, 0.7f}, 
      {0.6f, 0.6f, 0.6f}, {0.5f, 0.5f, 0.5f}, 
      {0.4f, 0.4f, 0.4f}, {0.3f, 0.3f, 0.3f}, 
      {0.2f, 0.2f, 0.2f}, {0.1f, 0.1f, 0.1f}
    },
  };

  const unsigned short int k_max = xyzset.size() - 1;
  const unsigned short int gr_max = 16;
  const double tol= 1e-9;
  test_knn<int, float>(xyzset, cknn, k_max, gr_max, tol);
}

///////////////////////////////////////////////////////////////////////////////
TEST_CASE("knn regression 4: fibonnacci sphere", "[ignore]") {
  std::vector<std::array<float, 3>> xyzset = {
    {0.500000f, 0.750000f, 0.500000f}, {0.408034f, 0.716667f, 0.584248f},
    {0.514860f, 0.683333f, 0.330683f}, {0.621688f, 0.650000f, 0.658720f},
    {0.282272f, 0.616667f, 0.461487f}, {0.698875f, 0.583333f, 0.373492f},
    {0.436410f, 0.550000f, 0.736551f}, {0.385030f, 0.516667f, 0.278631f},
    {0.734308f, 0.483333f, 0.585569f}, {0.273583f, 0.450000f, 0.593462f},
    {0.599901f, 0.416667f, 0.286516f}, {0.566174f, 0.383333f, 0.710974f},
    {0.326958f, 0.350000f, 0.399718f}, {0.666003f, 0.316667f, 0.463505f},
    {0.428269f, 0.283333f, 0.602030f}, {0.500000f, 0.250000f, 0.500000f}
  };
  std::vector<std::vector<std::array<float, 3>>> cknn = {
    {
      {0.5f, 0.75f, 0.5f},
      {0.408034f, 0.716667f, 0.584248f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.621688f, 0.65f, 0.65872f}, {0.282272f, 0.616667f, 0.461487f}, 
      {0.698875f, 0.583333f, 0.373492f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.734308f, 0.483333f, 0.585569f}, 
      {0.273583f, 0.45f, 0.593462f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.666003f, 0.316667f, 0.463505f}, {0.428269f, 0.283333f, 0.60203f}, 
      {0.5f, 0.25f, 0.5f}
    },
    {
      {0.408034f, 0.716667f, 0.584248f},
      {0.5f, 0.75f, 0.5f}, {0.282272f, 0.616667f, 0.461487f}, 
      {0.43641f, 0.55f, 0.736551f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.51486f, 0.683333f, 0.330683f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.734308f, 0.483333f, 0.585569f}, 
      {0.326958f, 0.35f, 0.399718f}, {0.428269f, 0.283333f, 0.60203f}, 
      {0.599901f, 0.416667f, 0.286516f}, {0.5f, 0.25f, 0.5f}, 
      {0.666003f, 0.316667f, 0.463505f}
    },
    {
      {0.51486f, 0.683333f, 0.330683f},
      {0.5f, 0.75f, 0.5f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.282272f, 0.616667f, 0.461487f}, 
      {0.408034f, 0.716667f, 0.584248f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.621688f, 0.65f, 0.65872f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.273583f, 0.45f, 0.593462f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.5f, 0.25f, 0.5f}, {0.566174f, 0.383333f, 0.710974f}, 
      {0.428269f, 0.283333f, 0.60203f}
    },
    {
      {0.621688f, 0.65f, 0.65872f},
      {0.734308f, 0.483333f, 0.585569f}, {0.5f, 0.75f, 0.5f}, 
      {0.43641f, 0.55f, 0.736551f}, {0.408034f, 0.716667f, 0.584248f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.51486f, 0.683333f, 0.330683f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.428269f, 0.283333f, 0.60203f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.5f, 0.25f, 0.5f}, {0.38503f, 0.516667f, 0.278631f}, 
      {0.326958f, 0.35f, 0.399718f}
    },
    {
      {0.282272f, 0.616667f, 0.461487f},
      {0.408034f, 0.716667f, 0.584248f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.5f, 0.75f, 0.5f}, 
      {0.51486f, 0.683333f, 0.330683f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.43641f, 0.55f, 0.736551f}, {0.428269f, 0.283333f, 0.60203f}, 
      {0.621688f, 0.65f, 0.65872f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.698875f, 0.583333f, 0.373492f}, {0.5f, 0.25f, 0.5f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.734308f, 0.483333f, 0.585569f}
    },
    {
      {0.698875f, 0.583333f, 0.373492f},
      {0.599901f, 0.416667f, 0.286516f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.5f, 0.75f, 0.5f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.408034f, 0.716667f, 0.584248f}, 
      {0.5f, 0.25f, 0.5f}, {0.566174f, 0.383333f, 0.710974f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.43641f, 0.55f, 0.736551f}, {0.428269f, 0.283333f, 0.60203f}, 
      {0.273583f, 0.45f, 0.593462f}
    },
    {
      {0.43641f, 0.55f, 0.736551f},
      {0.566174f, 0.383333f, 0.710974f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.408034f, 0.716667f, 0.584248f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.428269f, 0.283333f, 0.60203f}, {0.5f, 0.75f, 0.5f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.734308f, 0.483333f, 0.585569f}, 
      {0.5f, 0.25f, 0.5f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.666003f, 0.316667f, 0.463505f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.698875f, 0.583333f, 0.373492f}, {0.38503f, 0.516667f, 0.278631f}, 
      {0.599901f, 0.416667f, 0.286516f}
    },
    {
      {0.38503f, 0.516667f, 0.278631f},
      {0.326958f, 0.35f, 0.399718f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.698875f, 0.583333f, 0.373492f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.5f, 0.75f, 0.5f}, {0.5f, 0.25f, 0.5f}, 
      {0.408034f, 0.716667f, 0.584248f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.428269f, 0.283333f, 0.60203f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.566174f, 0.383333f, 0.710974f}
    },
    {
      {0.734308f, 0.483333f, 0.585569f},
      {0.621688f, 0.65f, 0.65872f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.599901f, 0.416667f, 0.286516f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.5f, 0.25f, 0.5f}, {0.5f, 0.75f, 0.5f}, 
      {0.428269f, 0.283333f, 0.60203f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.408034f, 0.716667f, 0.584248f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.282272f, 0.616667f, 0.461487f}
    },
    {
      {0.273583f, 0.45f, 0.593462f},
      {0.282272f, 0.616667f, 0.461487f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.428269f, 0.283333f, 0.60203f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.408034f, 0.716667f, 0.584248f}, {0.5f, 0.25f, 0.5f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.38503f, 0.516667f, 0.278631f}, 
      {0.5f, 0.75f, 0.5f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.51486f, 0.683333f, 0.330683f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.599901f, 0.416667f, 0.286516f}, {0.734308f, 0.483333f, 0.585569f}, 
      {0.698875f, 0.583333f, 0.373492f}
    },
    {
      {0.599901f, 0.416667f, 0.286516f},
      {0.698875f, 0.583333f, 0.373492f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.5f, 0.25f, 0.5f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.428269f, 0.283333f, 0.60203f}, 
      {0.5f, 0.75f, 0.5f}, {0.282272f, 0.616667f, 0.461487f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.273583f, 0.45f, 0.593462f}, {0.408034f, 0.716667f, 0.584248f}, 
      {0.43641f, 0.55f, 0.736551f}
    },
    {
      {0.566174f, 0.383333f, 0.710974f},
      {0.428269f, 0.283333f, 0.60203f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.5f, 0.25f, 0.5f}, 
      {0.666003f, 0.316667f, 0.463505f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.273583f, 0.45f, 0.593462f}, {0.408034f, 0.716667f, 0.584248f}, 
      {0.326958f, 0.35f, 0.399718f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.599901f, 0.416667f, 0.286516f}, {0.5f, 0.75f, 0.5f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.38503f, 0.516667f, 0.278631f}
    },
    {
      {0.326958f, 0.35f, 0.399718f},
      {0.38503f, 0.516667f, 0.278631f}, {0.5f, 0.25f, 0.5f}, 
      {0.273583f, 0.45f, 0.593462f}, {0.428269f, 0.283333f, 0.60203f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.666003f, 0.316667f, 0.463505f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.566174f, 0.383333f, 0.710974f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.408034f, 0.716667f, 0.584248f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.5f, 0.75f, 0.5f}, {0.734308f, 0.483333f, 0.585569f}, 
      {0.621688f, 0.65f, 0.65872f}
    },
    {
      {0.666003f, 0.316667f, 0.463505f},
      {0.5f, 0.25f, 0.5f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.566174f, 0.383333f, 0.710974f}, 
      {0.428269f, 0.283333f, 0.60203f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.326958f, 0.35f, 0.399718f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.38503f, 0.516667f, 0.278631f}, {0.51486f, 0.683333f, 0.330683f}, 
      {0.43641f, 0.55f, 0.736551f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.5f, 0.75f, 0.5f}, {0.282272f, 0.616667f, 0.461487f}, 
      {0.408034f, 0.716667f, 0.584248f}
    },
    {
      {0.428269f, 0.283333f, 0.60203f},
      {0.5f, 0.25f, 0.5f}, {0.566174f, 0.383333f, 0.710974f}, 
      {0.273583f, 0.45f, 0.593462f}, {0.326958f, 0.35f, 0.399718f}, 
      {0.666003f, 0.316667f, 0.463505f}, {0.43641f, 0.55f, 0.736551f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.599901f, 0.416667f, 0.286516f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.38503f, 0.516667f, 0.278631f}, 
      {0.621688f, 0.65f, 0.65872f}, {0.408034f, 0.716667f, 0.584248f}, 
      {0.698875f, 0.583333f, 0.373492f}, {0.5f, 0.75f, 0.5f}, 
      {0.51486f, 0.683333f, 0.330683f}
    },
    {
      {0.5f, 0.25f, 0.5f},
      {0.428269f, 0.283333f, 0.60203f}, {0.666003f, 0.316667f, 0.463505f}, 
      {0.326958f, 0.35f, 0.399718f}, {0.566174f, 0.383333f, 0.710974f}, 
      {0.599901f, 0.416667f, 0.286516f}, {0.273583f, 0.45f, 0.593462f}, 
      {0.734308f, 0.483333f, 0.585569f}, {0.38503f, 0.516667f, 0.278631f}, 
      {0.43641f, 0.55f, 0.736551f}, {0.698875f, 0.583333f, 0.373492f}, 
      {0.282272f, 0.616667f, 0.461487f}, {0.621688f, 0.65f, 0.65872f}, 
      {0.51486f, 0.683333f, 0.330683f}, {0.408034f, 0.716667f, 0.584248f}, 
      {0.5f, 0.75f, 0.5f}
    },
  };

  const unsigned short int k_max = xyzset.size() - 1;
  const unsigned short int gr_max = 16;
  const double tol= 1e-9;
  test_knn<int, float>(xyzset, cknn, k_max, gr_max, tol);
}

TEST_CASE("knn regression 5: 2 points separated by epsilon", "[ignore]") {
  const float eps = std::numeric_limits<float>::epsilon();
      
  std::vector<std::array<float, 3>> xyzset = {
    {0.5f, 0.5f, 0.5f},
    {0.5f, 0.5f + eps, 0.5f},
  };

  std::vector<std::vector<std::array<float, 3>>> cknn = {
    { {0.5f, 0.5f, 0.5f}, {0.5f, 0.5f + eps, 0.5f}, },
    { {0.5f, 0.5f + eps, 0.5f}, {0.5f, 0.5f, 0.5f}, },
  };

  const unsigned short int k_max = xyzset.size() - 1;
  const unsigned short int gr_max = 16;
  const double tol= 1e-9;
  test_knn<int, float>(xyzset, cknn, k_max, gr_max, tol);
}

///////////////////////////////////////////////////////////////////////////////
/// Helper functions
///////////////////////////////////////////////////////////////////////////////

template <typename T1, typename T2>
static void test_knn(
  std::vector<std::array<T2, 3>>& xyzset,
  std::vector<std::vector<std::array<T2, 3>>>& cknn,
  unsigned short int k_max,
  unsigned short int gr_max,
  double tol
) {
  for (auto gr0 = 1; gr0 <= gr_max; gr0++) {
    for (auto k0 = 1; k0 <= k_max; k0++) {

      SECTION("case : k0 = " + std::to_string(k0) + ", gr = " + std::to_string(gr0)) {

        struct votess::vtargs args(k0, gr0);
        const auto [hid, hpq] = get_knn<T1, T2>(xyzset, args);

        for (size_t i = 0; i < xyzset.size(); i++) {
          int index = -1;
          for (size_t j = 0; j < cknn.size(); j++) {
            if ((fabs(xyzset[i][0] - cknn[j][0][0]) < tol) &&
                (fabs(xyzset[i][1] - cknn[j][0][1]) < tol) &&
                (fabs(xyzset[i][2] - cknn[j][0][2]) < tol)) {
              index = j;
              break;
            }
          }

          if (index == -1) {
            REQUIRE(index != -1);
            continue;
          }

          for (int ki = 0; ki < k0; ki++) {
            const T2 distance = xyzset::get_distance<T2>(
              cknn[index][ki+1][0], cknn[index][ki+1][1], cknn[index][ki+1][2],
              cknn[index][0][0],    cknn[index][0][1],    cknn[index][0][2]
            );

            REQUIRE_THAT(
              distance, Catch::Matchers::WithinRel(hpq[k0 * i + ki])
            );
          }
        }
      }
    }
  }
}

template <typename T1, typename T2>
static std::pair<std::vector<T1>, std::vector<T2>>
get_knn(
  std::vector<std::array<T2,3>>& inset,
  const struct votess::vtargs& args

) {
  auto [id, offset] = xyzset::sort<T1,T2>(inset, args.xyzset);
  {
    if (!xyzset::validate_xyzset<T2>(inset)) {
      std::cout<<"oops1"<<std::endl;
    }
    if (!xyzset::validate_id<T1>(id)) {
      std::cout<<"oops2"<<std::endl;
    }
    if (!xyzset::validate_offset<T1>(offset)) {
      std::cout<<"oops3"<<std::endl;
    }
    auto gr = args.xyzset.grid_resolution;
    if (!xyzset::validate_sort<T1,T2>(inset, id, gr)) {
      std::cout<<"oops4"<<std::endl;
      std::abort();
    }
  }

  std::vector<T2> xyzset(3 * inset.size());
  for (size_t i = 0; i < inset.size(); i++) {
    xyzset[inset.size() * 0 + i] = inset[i][0];
    xyzset[inset.size() * 1 + i] = inset[i][1];
    xyzset[inset.size() * 2 + i] = inset[i][2];
  }

  sycl::queue queue;
  sycl::buffer<T1, 1> bid(id.data(), sycl::range<1>(id.size()));
  sycl::buffer<T2, 1> bxyzset(xyzset.data(), sycl::range<1>(xyzset.size()));
  sycl::buffer<T1, 1> boffset(offset.data(), sycl::range<1>(offset.size()));
  sycl::buffer<T1, 1> bhid(sycl::range<1>(inset.size() * args.knn.k));
  sycl::buffer<T2, 1> bhpq(sycl::range<1>(inset.size() * args.knn.k));
  queue.submit([&](sycl::handler& cgh) {
    auto ahid = bhid.template get_access<sycl::access::mode::read_write>(cgh);
    cgh.fill(ahid, 0);
  });
  queue.submit([&](sycl::handler& cgh) {
    auto ahpq = bhpq.template get_access<sycl::access::mode::read_write>(cgh);
    cgh.fill(ahpq, 32.00f);
  });
  queue.submit([&](sycl::handler& cgh) {
    auto axyzset = bxyzset.template get_access<sycl::access::mode::read>(cgh);
    auto aid = bid.template get_access<sycl::access::mode::read>(cgh);
    auto aoffset = boffset.template get_access<sycl::access::mode::read>(cgh);
    auto ahid = bhid.template get_access<sycl::access::mode::read_write>(cgh);
    auto ahpq = bhpq.template get_access<sycl::access::mode::read_write>(cgh);
    auto aargs_knn = args.knn;
    cgh.parallel_for<class knn_sycl>(
      sycl::range<1>(xyzset.size() / 3),
      [=](sycl::id<1> idx) {
        knni::compute<T1,T2>(
          idx[0], 
          axyzset, axyzset.size() / 3, aid, aoffset, 
          axyzset, axyzset.size() / 3,
          ahid, ahpq,
          aargs_knn
        );
      });
    queue.wait();
  });
  
  std::vector<T1> vid(inset.size() * args.knn.k);
  std::vector<T2> vpq(inset.size() * args.knn.k);
  auto ahid = bhid.get_host_access();
  auto ahpq = bhpq.get_host_access();
  std::copy_n(ahid.get_pointer(), inset.size() * args.knn.k, vid.begin());
  std::copy_n(ahpq.get_pointer(), inset.size() * args.knn.k, vpq.begin());

  return {vid, vpq};
}
